til.Y <- Y - phi.mat %*% mu.theta
#print(til.Y)
K0 <- phi.mat %*% Sigma.theta %*% t(phi.mat)
K1 <- (psi.mat %*% Sigma.u %*% t(psi.mat)) * id.mat
K2 <- (psi.mat %*% Sigma.v %*% t(psi.mat)) * rho.mat
K <- K0 + K1 + K2
# marginal likelihood
c(t(til.Y) %*% solve( K + diag(var.noise, nrow(K))) %*% til.Y + log(det(K + diag(var.noise, nrow(K)))))
}
obj = function(x){
param = list(var.noise = x[1], Sigma.u = matrix(c(x[2], x[3] * sqrt(x[2]*x[4]), x[3] * sqrt(x[2]*x[4]), x[4]), 2, 2),
Sigma.v = matrix(c(x[5], 0, 0, x[6]), 2, 2))
loglikhd (train.dat, prior, param)
}
init <- c(1, 1, 0, 1, 1, 1)
op <- optim(obj, par = init,
lower = c(1e-10, 1e-7, -1, 1e-7, 1e-3, 1e-7),
upper = c(Inf, Inf, 1, Inf, Inf, Inf), method = "L-BFGS-B", control = list(maxit = 10))
#"L-BFGS-B"
x <- op$par
param = list(var.noise = x[1], Sigma.u = matrix(c(x[2], x[3] * sqrt(x[2]*x[4]), x[3] * sqrt(x[2]*x[4]), x[4]), 2, 2),
Sigma.v = matrix(c(x[5], 0, 0, x[6]), 2, 2))
return(param)
}
wm <- emp.bayes(train.dat, prior)
View(wm)
# import data
train.dat <- list(X=as.matrix(read.csv("test_data_matrix.csv", header = T)),
Y=c(read.csv("reward.csv", header = T)$reward),
id=c(read.csv("users.csv", header = T)$user_id),
days= c(read.csv("days.csv", header = T)$day_id))
# import data
train.dat <- list(X=as.matrix(read.csv("test_data_matrix_new.csv", header = T)),
Y=c(read.csv("reward.csv", header = T)$reward),
id=c(read.csv("users.csv", header = T)$user_id),
days= c(read.csv("days.csv", header = T)$day_id))
#Sigma.theta = diag(c(3.774,	3.654,	1.799,	0.755,	4.359,	0.508,	4.123,	2.71,
#                     2.22,	4.956,	2.225,	0.822,	0.904,
#                     2.22,	4.956,	2.225,	0.822,	0.904)^2),
#mu.theta = c(0.823,	1.949,	3.812,	-0.192,	0.763,	0,	-0.917,	0,
#             0.47,	0,	0,	0,	0,
#             0.47,	0,	0,	0,	0)
prior = list(
Sigma.theta = diag(c(1.0,	1.0,	1.0,	1.0,	1.0,	1.0,	1.0,	1.0,
1.0,	1.0,	1.0,	1.0,	1.0,
1.0,	1.0,	1.0,	1.0,	1.0)^2),
mu.theta = c(0.0,	0,	0,	0,	0,	0,	0,	0,
0,	0,	0,	0,	0,
0,	0,	0,	0,	0)
)
post.cal = function(train.dat, target.user, target.day, prior, tuning.param){
mu.theta <- prior$mu.theta;
Sigma.theta <- prior$Sigma.theta;
Sigma.u <- tuning.param$Sigma.u;
Sigma.v <- tuning.param$Sigma.v;
var.noise <- tuning.param$var.noise
print(Sigma.u)
print(var.noise)
print(Sigma.v)
sigma.rho <- 1 # parameter for the correlation for time-varying effect
X <- train.dat$X
Y <- train.dat$Y
id <- train.dat$id
days <- train.dat$days
nT <- nrow(X)
p <- ncol(X)
H <- matrix(0, nrow = p, ncol = 2)
H[1, 1] <- H[9, 2] <- H[14, 2] <- 1
print(H)
id.mat <- diag(nT)
for(k in 1:nT){
for(l in 1:nT){
# id.mat[k, l] <- (train.dat[k, 1] == train.dat[l, 1])
id.mat[k, l] <- (id[k] == id[l])
}
}
rho.mat <- matrix(NA, ncol = nT, nrow = nT)
for(k in 1:nT){
for(l in 1:nT){
rho.mat[k, l] <- exp(-(days[k] - days[l])^2/sigma.rho^2)
}
}
phi.mat <- X # [g0, g1, pif0, pif1, (A-pi) f0, (A-pi) f1] = [g, pif, (A-pi) f]
psi.mat <- cbind(X[, 1], X[, 14] + X[, 9]) # [g0, Af0]#
til.Y <- Y - phi.mat %*% mu.theta
#print(til.Y)
K0 <- phi.mat %*% Sigma.theta %*% t(phi.mat)
K1 <- (psi.mat %*% Sigma.u %*% t(psi.mat)) * id.mat
K2 <- (psi.mat %*% Sigma.v %*% t(psi.mat)) * rho.mat
K <- K0 + K1 + K2
####
id.tst <- (id == target.user)
rho.tst <- rep(NA, nT)
for(l in 1:nT){
rho.tst[l] <- exp(-(target.day - days[l])^2/sigma.rho^2)
}
M0 <- phi.mat %*% Sigma.theta
M1 <- phi.mat %*% (H %*% Sigma.u %*% t(H)) * id.tst
M2 <- phi.mat %*% (H %*% Sigma.v %*% t(H)) * rho.tst
M <- M0 + M1 + M2
#print(M[10,])
#print(K[10,])
print(var.noise)
temp <- solve(K + var.noise*diag(nT))
print(dim(temp))
post.mean <- mu.theta + t(M) %*% temp %*% til.Y
post.var <- Sigma.theta + H %*% Sigma.u %*% t(H) - t(M) %*% temp %*% M
beta.index= tail(1:ncol(phi.mat), 5)
list(mean = post.mean[beta.index], var = post.var[beta.index, beta.index])
}
emp.bayes = function(train.dat, prior){
loglikhd = function(train.dat, prior, tuning.param){
mu.theta <- prior$mu.theta;
Sigma.theta <- prior$Sigma.theta;
Sigma.u <- tuning.param$Sigma.u;
Sigma.v <- tuning.param$Sigma.v;
var.noise <- tuning.param$var.noise
sigma.rho <- 1 # parameter for the correlation for time-varying effect
X <- train.dat$X
Y <- train.dat$Y
id <- train.dat$id
days <- train.dat$days
nT <- nrow(X)
p <- ncol(X)
H <- matrix(0, nrow = p, ncol = 2)
H[1, 1] <- H[9, 2] <- H[14, 2] <- 1
id.mat <- diag(nT)
#print(id.mat)
for(k in 1:nT){
for(l in 1:nT){
# id.mat[k, l] <- (train.dat[k, 1] == train.dat[l, 1])
id.mat[k, l] <- (id[k] == id[l])
}
}
#print(id.mat)
rho.mat <- matrix(NA, ncol = nT, nrow = nT)
for(k in 1:nT){
for(l in 1:nT){
rho.mat[k, l] <- exp(-(days[k] - days[l])^2/sigma.rho^2)
}
}
phi.mat <- X # [g0, g1, pif0, pif1, (A-pi) f0, (A-pi) f1] = [g, pif, (A-pi) f]
psi.mat <- cbind(X[, 1], X[, 14] + X[, 9]) # [g0, Af0]#
til.Y <- Y - phi.mat %*% mu.theta
#print(til.Y)
K0 <- phi.mat %*% Sigma.theta %*% t(phi.mat)
K1 <- (psi.mat %*% Sigma.u %*% t(psi.mat)) * id.mat
K2 <- (psi.mat %*% Sigma.v %*% t(psi.mat)) * rho.mat
K <- K0 + K1 + K2
# marginal likelihood
c(t(til.Y) %*% solve( K + diag(var.noise, nrow(K))) %*% til.Y + log(det(K + diag(var.noise, nrow(K)))))
}
obj = function(x){
param = list(var.noise = x[1], Sigma.u = matrix(c(x[2], x[3] * sqrt(x[2]*x[4]), x[3] * sqrt(x[2]*x[4]), x[4]), 2, 2),
Sigma.v = matrix(c(x[5], 0, 0, x[6]), 2, 2))
loglikhd (train.dat, prior, param)
}
init <- c(1, 1, 0, 1, 1, 1)
op <- optim(obj, par = init,
lower = c(1e-10, 1e-7, -1, 1e-7, 1e-7, 1e-7),
upper = c(Inf, Inf, 1, Inf, Inf, Inf), method = "L-BFGS-B", control = list(maxit = 100))
#"L-BFGS-B"
x <- op$par
param = list(var.noise = x[1], Sigma.u = matrix(c(x[2], x[3] * sqrt(x[2]*x[4]), x[3] * sqrt(x[2]*x[4]), x[4]), 2, 2),
Sigma.v = matrix(c(x[5], 0, 0, x[6]), 2, 2))
return(param)
}
wm <- emp.bayes(train.dat, prior)
View(train.dat)
emp.bayes = function(train.dat, prior){
loglikhd = function(train.dat, prior, tuning.param){
mu.theta <- prior$mu.theta;
Sigma.theta <- prior$Sigma.theta;
Sigma.u <- tuning.param$Sigma.u;
Sigma.v <- tuning.param$Sigma.v;
var.noise <- tuning.param$var.noise
sigma.rho <- 1 # parameter for the correlation for time-varying effect
X <- train.dat$X
Y <- train.dat$Y
id <- train.dat$id
days <- train.dat$days
nT <- nrow(X)
p <- ncol(X)
H <- matrix(0, nrow = p, ncol = 2)
H[1, 1] <- H[9, 2] <- H[14, 2] <- 1
id.mat <- diag(nT)
#print(id.mat)
for(k in 1:nT){
for(l in 1:nT){
# id.mat[k, l] <- (train.dat[k, 1] == train.dat[l, 1])
id.mat[k, l] <- (id[k] == id[l])
}
}
#print(id.mat)
rho.mat <- matrix(NA, ncol = nT, nrow = nT)
for(k in 1:nT){
for(l in 1:nT){
rho.mat[k, l] <- exp(-(days[k] - days[l])^2/sigma.rho^2)
}
}
phi.mat <- X # [g0, g1, pif0, pif1, (A-pi) f0, (A-pi) f1] = [g, pif, (A-pi) f]
psi.mat <- cbind(X[, 1], X[, 14] + X[, 9]) # [g0, Af0]#
til.Y <- Y - phi.mat %*% mu.theta
#print(til.Y)
K0 <- phi.mat %*% Sigma.theta %*% t(phi.mat)
K1 <- (psi.mat %*% Sigma.u %*% t(psi.mat)) * id.mat
K2 <- (psi.mat %*% Sigma.v %*% t(psi.mat)) * rho.mat
K <- K0 + K1 + K2
# marginal likelihood
c(t(til.Y) %*% solve( K + diag(var.noise, nrow(K))) %*% til.Y + log(det(K + diag(var.noise, nrow(K)))))
}
obj = function(x){
param = list(var.noise = x[1], Sigma.u = matrix(c(x[2], x[3] * sqrt(x[2]*x[4]), x[3] * sqrt(x[2]*x[4]), x[4]), 2, 2),
Sigma.v = matrix(c(x[5], 0, 0, x[6]), 2, 2))
loglikhd (train.dat, prior, param)
}
init <- c(1, 1, 0, 1, 1, 1)
op <- optim(obj, par = init,
lower = c(1e-7, 1e-7, -1, 1e-7, 1e-7, 1e-7),
upper = c(Inf, Inf, 1, Inf, Inf, Inf), method = "L-BFGS-B", control = list(maxit = 100))
#"L-BFGS-B"
x <- op$par
param = list(var.noise = x[1], Sigma.u = matrix(c(x[2], x[3] * sqrt(x[2]*x[4]), x[3] * sqrt(x[2]*x[4]), x[4]), 2, 2),
Sigma.v = matrix(c(x[5], 0, 0, x[6]), 2, 2))
return(param)
}
wm <- emp.bayes(train.dat, prior)
# import data
train.dat <- list(X=as.matrix(read.csv("test_data_matrix_new.csv", header = T)),
Y=c(read.csv("reward.csv", header = T)$reward),
id=c(read.csv("users.csv", header = T)$user_id),
days= c(read.csv("days.csv", header = T)$day_id))
op <- optim(obj, par = init,
lower = c(1e-10, 1e-7, -1, 1e-7, 1e-7, 1e-7),
upper = c(Inf, Inf, 1, Inf, Inf, Inf), method = "L-BFGS-B", control = list(maxit = 100))
x <- op$par
param = list(var.noise = x[1], Sigma.u = matrix(c(x[2], x[3] * sqrt(x[2]*x[4]), x[3] * sqrt(x[2]*x[4]), x[4]), 2, 2),
Sigma.v = matrix(c(x[5], 0, 0, x[6]), 2, 2))
return(param)
emp.bayes = function(train.dat, prior){
loglikhd = function(train.dat, prior, tuning.param){
mu.theta <- prior$mu.theta;
Sigma.theta <- prior$Sigma.theta;
Sigma.u <- tuning.param$Sigma.u;
Sigma.v <- tuning.param$Sigma.v;
var.noise <- tuning.param$var.noise
sigma.rho <- 1 # parameter for the correlation for time-varying effect
X <- train.dat$X
Y <- train.dat$Y
id <- train.dat$id
days <- train.dat$days
nT <- nrow(X)
p <- ncol(X)
H <- matrix(0, nrow = p, ncol = 2)
H[1, 1] <- H[9, 2] <- H[14, 2] <- 1
id.mat <- diag(nT)
#print(id.mat)
for(k in 1:nT){
for(l in 1:nT){
# id.mat[k, l] <- (train.dat[k, 1] == train.dat[l, 1])
id.mat[k, l] <- (id[k] == id[l])
}
}
#print(id.mat)
rho.mat <- matrix(NA, ncol = nT, nrow = nT)
for(k in 1:nT){
for(l in 1:nT){
rho.mat[k, l] <- exp(-(days[k] - days[l])^2/sigma.rho^2)
}
}
phi.mat <- X # [g0, g1, pif0, pif1, (A-pi) f0, (A-pi) f1] = [g, pif, (A-pi) f]
psi.mat <- cbind(X[, 1], X[, 14] + X[, 9]) # [g0, Af0]#
til.Y <- Y - phi.mat %*% mu.theta
#print(til.Y)
K0 <- phi.mat %*% Sigma.theta %*% t(phi.mat)
K1 <- (psi.mat %*% Sigma.u %*% t(psi.mat)) * id.mat
K2 <- (psi.mat %*% Sigma.v %*% t(psi.mat)) * rho.mat
K <- K0 + K1 + K2
# marginal likelihood
c(t(til.Y) %*% solve( K + diag(var.noise, nrow(K))) %*% til.Y + log(det(K + diag(var.noise, nrow(K)))))
}
obj = function(x){
param = list(var.noise = x[1], Sigma.u = matrix(c(x[2], x[3] * sqrt(x[2]*x[4]), x[3] * sqrt(x[2]*x[4]), x[4]), 2, 2),
Sigma.v = matrix(c(x[5], 0, 0, x[6]), 2, 2))
loglikhd (train.dat, prior, param)
}
init <- c(1, 1, 0, 1, 1, 1)
op <- optim(obj, par = init,
lower = c(1e-10, 1e-7, -1, 1e-7, 1e-7, 1e-7),
upper = c(Inf, Inf, 1, Inf, Inf, Inf), method = "L-BFGS-B", control = list(maxit = 100))
#"L-BFGS-B"
x <- op$par
param = list(var.noise = x[1], Sigma.u = matrix(c(x[2], x[3] * sqrt(x[2]*x[4]), x[3] * sqrt(x[2]*x[4]), x[4]), 2, 2),
Sigma.v = matrix(c(x[5], 0, 0, x[6]), 2, 2))
return(param)
}
wm <- emp.bayes(train.dat, prior)
# hyperparameter
tuning.param <- wm
emp.bayes = function(train.dat, prior){
loglikhd = function(train.dat, prior, tuning.param){
mu.theta <- prior$mu.theta;
Sigma.theta <- prior$Sigma.theta;
Sigma.u <- tuning.param$Sigma.u;
Sigma.v <- tuning.param$Sigma.v;
var.noise <- tuning.param$var.noise
sigma.rho <- 1 # parameter for the correlation for time-varying effect
X <- train.dat$X
Y <- train.dat$Y
id <- train.dat$id
days <- train.dat$days
nT <- nrow(X)
p <- ncol(X)
H <- matrix(0, nrow = p, ncol = 2)
H[1, 1] <- H[9, 2] <- H[14, 2] <- 1
id.mat <- diag(nT)
#print(id.mat)
for(k in 1:nT){
for(l in 1:nT){
# id.mat[k, l] <- (train.dat[k, 1] == train.dat[l, 1])
id.mat[k, l] <- (id[k] == id[l])
}
}
#print(id.mat)
rho.mat <- matrix(NA, ncol = nT, nrow = nT)
for(k in 1:nT){
for(l in 1:nT){
rho.mat[k, l] <- exp(-(days[k] - days[l])^2/sigma.rho^2)
}
}
phi.mat <- X # [g0, g1, pif0, pif1, (A-pi) f0, (A-pi) f1] = [g, pif, (A-pi) f]
psi.mat <- cbind(X[, 1], X[, 14] + X[, 9]) # [g0, Af0]#
til.Y <- Y - phi.mat %*% mu.theta
#print(til.Y)
K0 <- phi.mat %*% Sigma.theta %*% t(phi.mat)
K1 <- (psi.mat %*% Sigma.u %*% t(psi.mat)) * id.mat
K2 <- (psi.mat %*% Sigma.v %*% t(psi.mat)) * rho.mat
K <- K0 + K1 + K2
# marginal likelihood
c(t(til.Y) %*% solve( K + diag(var.noise, nrow(K))) %*% til.Y + log(det(K + diag(var.noise, nrow(K)))))
}
obj = function(x){
param = list(var.noise = x[1], Sigma.u = matrix(c(x[2], x[3] * sqrt(x[2]*x[4]), x[3] * sqrt(x[2]*x[4]), x[4]), 2, 2),
Sigma.v = matrix(c(x[5], 0, 0, x[6]), 2, 2))
loglikhd (train.dat, prior, param)
}
init <- c(1, 1, 0, 1, 1, 1)
op <- optim(obj, par = init,
lower = c(1e-10, 1e-7, -1, 1e-7, 1e-7, 1e-7),
upper = c(Inf, Inf, 1, Inf, Inf, Inf), method = "L-BFGS-B", control = list(maxit = 10))
#"L-BFGS-B"
x <- op$par
param = list(var.noise = x[1], Sigma.u = matrix(c(x[2], x[3] * sqrt(x[2]*x[4]), x[3] * sqrt(x[2]*x[4]), x[4]), 2, 2),
Sigma.v = matrix(c(x[5], 0, 0, x[6]), 2, 2))
return(param)
}
wm <- emp.bayes(train.dat, prior)
# hyperparameter
tuning.param <- wm
call_all<-function(){
someusers <- read.csv(file = 'join_dates.csv')
print(someusers)
for (id in participants) {
return_immediately(id)
}
return("")
}
results<-call_all()
return_immediately<-function(id){
tryCatch({
print(id)
tempfile = paste("data/user", id, "_pooled_params/temp_policy.Rdata", sep = "")
oldfile= paste("data/user", id, "_pooled_params/policy.Rdata", sep = "")
load(oldfile)
#print('loaded old')
load(tempfile)
data.policy$mu.beta = dataset$mu
A = matrix(nrow=5,ncol=5,byrow=TRUE)
A[1,] = dataset$sigma0
A[2,] = dataset$sigma1
A[3,] = dataset$sigma2
A[4,] = dataset$sigma3
A[5,] = dataset$sigma4
#colnames(temp) <- NULL
data.policy$Sigma.beta = A
save(data.policy, file = oldfile)
#print('set new')
},error= function(err){
reasons = 'savine'
print(err)
reasons=paste(reasons, err, sep = "")
temp = c(reasons)
write(x = temp, file = "errorfile_pooled.txt", ncolumns = length(temp), append = TRUE)
}
)
#if(inherits(possibleError, "error")) next
}
call_all<-function(){
someusers <- read.csv(file = 'join_dates.csv')
print(someusers)
for (id in participants) {
return_immediately(id)
}
return("")
}
results<-call_all()
setwd('../../heartsteps/pooling-service')
results<-call_all()
#! /usr/bin/Rscript
## Required packages and source files
#"test-nickreid","test-pedja"
#participants = c("10339","10259","10194","10360","10269","10234","10365","10352","10336","10304")
library(lubridate)
someusers <- read.csv(file = 'join_dates.csv')
someusers$join_date = as_datetime(someusers$join_date)
someusers <- read.csv(file = 'join_dates.csv',format= "%m/%d/%y")
someusers <- read.csv(file = 'join_dates.csv',format= "%m.%d.%y")
someusers$join_date = as_datetime(someusers$join_date,format= "%m.%d.%y")
someusers$join_date = as.Date(someusers$join_date,format= "%m.%d.%y")
print(someusers)
someusers <- read.csv(file = 'join_dates.csv')
someusers$join_date = as.Date(someusers$join_date,format= "%m.%d.%y")
print(someusers)
someusers <- read.csv(file = 'join_dates.csv')
someusers$join_date = as.Date(someusers$join_date,format= "%m/%/%y")
print(someusers)
someusers <- read.csv(file = 'join_dates.csv')
someusers$join_date = as_date(someusers$join_date,format= "%m/%/%y")
someusers$join_date = as_date(someusers$join_date)
someusers <- read.csv(file = 'join_dates.csv')
someusers$join_date = as_date(someusers$join_date,format= "%m/%d/%y")
someusers <- read.csv(file = 'join_dates.csv')
someusers$join_date = as_date(someusers$join_date,format= "%m.%d.%y")
someusers <- read.csv(file = 'join_dates.csv')
someusers$join_date = as_date(someusers$join_date)
someusers <- read.csv(file = 'join_dates.csv')
someusers$join_date = as.Date(as.character(someusers$join_date),format= "%m/%d/Y")
print(someusers)
someusers <- read.csv(file = 'join_dates.csv')
#someusers$join_date =
print(as.Date(as.character(someusers$join_date),format= "%m/%d/Y"))
#someusers$join_date =
print(as.Date(as.character(someusers$join_date)))
#someusers$join_date =
print(as.Date(as.character(someusers$join_date)),format= "%m/%d/%Y")
someusers <- read.csv(file = 'join_dates.csv')
#someusers$join_date =
print(as.Date(as.character(someusers$join_date)),format= "%m/%d/%Y")
#someusers$join_date =
print(as.Date(as.character(someusers$join_date)),format= "%m%d%Y")
#someusers$join_date =
print(as.Date(as.character(someusers$join_date)),format= "%m%d%Y"))
#someusers$join_date =
print(as.Date(as.character(someusers$join_date),format= "%m%d%Y"))
#someusers$join_date =
print(as.Date(someusers$join_date,format= "%m%d%Y"))
print(lubridate::mdy(someusers$join_date))
someusers <- read.csv(file = 'join_dates.csv')
someusers$join_date = lubridate::mdy(someusers$join_date)
print(someusers)
start = lubridate::mdy('12/2/2019')
for (i in 1:dim(someusers)[1]) {
print(someusers$join_date[i]>=start)
}
start = lubridate::mdy('12/2/2019')
print(start)
for (i in 1:dim(someusers)[1]) {
print(someusers$join_date[i]>=start)
print(someusers$join_date[i])
}
getwd()
someusers <- read.csv(file = 'join_dates.csv')
someusers$join_date = lubridate::mdy(someusers$join_date)
print(someusers)
start = lubridate::mdy('12/2/2019')
print(start)
for (i in 1:dim(someusers)[1]) {
print(someusers$join_date[i]>=start)
print(someusers$join_date[i])
}
someusers <- read.csv(file = 'join_dates.csv')
someusers$join_date = lubridate::mdy(someusers$join_date)
print(someusers)
start = lubridate::mdy('12/2/2019')
print(start)
for (i in 1:dim(someusers)[1]) {
print(someusers$join_date[i]>=start)
print(someusers$join_date[i])
}
someusers$join_date = lubridate::mdy(someusers$join_date)
print(someusers)
someusers <- read.csv(file = 'join_dates.csv')
someusers$join_date = lubridate::mdy(someusers$join_date)
print(someusers)
start = lubridate::mdy('12/2/2019')
print(start)
participants<-c()
for (i in 1:dim(someusers)[1]) {
if(someusers$join_date[i]>=start){
append(participants,someusers$user_id[i])
}
}
print(participants)
participants<-c()
for (i in 1:dim(someusers)[1]) {
if(someusers$join_date[i]>=start){
participants<-append(participants,someusers$user_id[i])
}
}
print(participants)
install.packages('lubridate')
install.packages("lubridate")
